/*
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.tmf632.api;

import io.swagger.tmf632.model.Individual;
import io.swagger.tmf632.model.IndividualCreate;
import io.swagger.tmf632.model.IndividualUpdate;
import org.junit.Test;
import org.junit.Ignore;


import java.util.List;


/**
 * API tests for IndividualApi
 */
@Ignore
public class IndividualApiTest {

    private final io.swagger.tmf632.api.IndividualApi api = new IndividualApi();

    /**
     * Creates a Individual
     *
     * This operation creates a Individual entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIndividualTest() throws Exception {
        IndividualCreate body = null;
        Individual response = api.createIndividual(body);

        // TODO: test validations
    }
    /**
     * Deletes a Individual
     *
     * This operation deletes a Individual entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteIndividualTest() throws Exception {
        String id = null;
        api.deleteIndividual(id);

        // TODO: test validations
    }
    /**
     * List or find Individual objects
     *
     * This operation list or find Individual entities
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listIndividualTest() throws Exception {
        String fields = null;
        Integer offset = null;
        Integer limit = null;
        List<Individual> response = api.listIndividual(fields, offset, limit);

        // TODO: test validations
    }
    /**
     * Updates partially a Individual
     *
     * This operation updates partially a Individual entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchIndividualTest() throws Exception {
        IndividualUpdate body = null;
        String id = null;
        Individual response = api.patchIndividual(body, id);

        // TODO: test validations
    }
    /**
     * Retrieves a Individual by ID
     *
     * This operation retrieves a Individual entity. Attribute selection is enabled for all first level attributes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveIndividualTest() throws Exception {
        String id = null;
        String fields = null;
        Individual response = api.retrieveIndividual(id, fields);

        // TODO: test validations
    }
}

/*
 * API Party
 * ## TMF API Reference : TMF 632 - Party   ### Release : 19.0   The party API provides standardized mechanism for party management such as creation, update, retrieval, deletion and notification of events. Party can be an individual or an organization that has any kind of relation with the enterprise. Party is created to record individual or organization information before the assignment of any role. For example, within the context of a split billing mechanism, Party API allows creation of the individual or organization that will play the role of 3 rd payer for a given offer and, then, allows consultation or update of his information.  ### Resources - Organization - Individual - Hub  Party API performs the following operations : - Retrieve an organization or an individual - Retrieve a collection of organizations or individuals according to given criteria - Create a new organization or a new individual - Update an existing organization or an existing individual - Delete an existing organization or an existing individual - Notify events on organizatin or individual
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import io.swagger.client.model.Organization;
import io.swagger.client.model.OrganizationCreate;
import io.swagger.client.model.OrganizationUpdate;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for OrganizationApi
 */
@Ignore
public class OrganizationApiTest {

    private final OrganizationApi api = new OrganizationApi();

    /**
     * Creates a Organization
     *
     * This operation creates a Organization entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws Exception {
        OrganizationCreate body = null;
        Organization response = api.createOrganization(body);

        // TODO: test validations
    }
    /**
     * Deletes a Organization
     *
     * This operation deletes a Organization entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws Exception {
        String id = null;
        api.deleteOrganization(id);

        // TODO: test validations
    }
    /**
     * List or find Organization objects
     *
     * This operation list or find Organization entities
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listOrganizationTest() throws Exception {
        String fields = null;
        Integer offset = null;
        Integer limit = null;
        List<Organization> response = api.listOrganization(fields, offset, limit);

        // TODO: test validations
    }
    /**
     * Updates partially a Organization
     *
     * This operation updates partially a Organization entity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchOrganizationTest() throws Exception {
        OrganizationUpdate body = null;
        String id = null;
        Organization response = api.patchOrganization(body, id);

        // TODO: test validations
    }
    /**
     * Retrieves a Organization by ID
     *
     * This operation retrieves a Organization entity. Attribute selection is enabled for all first level attributes.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveOrganizationTest() throws Exception {
        String id = null;
        String fields = null;
        Organization response = api.retrieveOrganization(id, fields);

        // TODO: test validations
    }
}
